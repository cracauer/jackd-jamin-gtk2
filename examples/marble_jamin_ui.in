# pixmap_path "<dir 1>:<dir 2>:<dir 3>:..."
#

pixmap_path "@prefix@/share/jamin/pixmaps"
 
#
# style <name> [= <name>]
# {
#   <option>
# }
#
# widget <widget_set> style <style_name>
# widget_class <widget_class_set> style <style_name>

# Here is a list of all the possible states.  Note that some do not apply to
# certain widgets.
#
# NORMAL - The normal state of a widget, without the mouse over top of
# it, and not being pressed, etc.
#
# PRELIGHT - When the mouse is over top of the widget, colors defined
# using this state will be in effect.
#
# ACTIVE - When the widget is pressed or clicked it will be active, and
# the attributes assigned by this tag will be in effect.
#
# INSENSITIVE - When a widget is set insensitive, and cannot be
# activated, it will take these attributes.
#
# SELECTED - When an object is selected, it takes these attributes.
#
# Given these states, we can set the attributes of the widgets in each of
# these states using the following directives.
#
# fg - Sets the foreground color of a widget.
# fg - Sets the background color of a widget.
# bg_pixmap - Sets the background of a widget to a tiled pixmap.
# font - Sets the font to be used with the given widget.
#

# This sets a style called "button".  The name is not really important, as
# it is assigned to the actual widgets at the bottom of the file.

#style "example"
#{
#  #This sets the padding around the window to the pixmap specified.
#  #bg_pixmap[<STATE>] = "<pixmap filename>"
#  bg_pixmap[NORMAL] = "gold.xpm"
#  
#  #Sets the background color to red when in the "ACTIVE"
#  #state.
#
#  bg[ACTIVE] = { 1.0, 0, 0 }
#
#}

style "marble"
{
  #This sets the padding around the window to the pixmap specified.
  bg_pixmap[NORMAL] = "marble.jpg"
  fg[NORMAL] = { 0, 0, 0 }	
  fg[ACTIVE] = { 0, 0, 0 }
  fg[PRELIGHT] = { 0, 0, 0 }
  fg[INSENSITIVE] = { 0, 0, 0 }
  fg[SELECTED] = { 0, 0, 0 }
}


style "thai-gold"
{

   #Sets the colors for the faders

   	bg_pixmap[NORMAL] = "thai-gold.png"
    	bg_pixmap[ACTIVE] = "thai-gold.png"
  	bg_pixmap[PRELIGHT] = "thai-gold-knobs.png"
}

style "button" = "marble"
{
  # This shows all the possible states for a button.  The only one that
  # doesn't apply is the SELECTED state.
  
  fg[NORMAL] = { 0, 0, 0 } 		# black
  fg[ACTIVE] = {1.0, 0, 0 }
  fg[PRELIGHT] = { 1.0, 1.0, 0 }
#  bg[NORMAL] = {0.32, 0.39, 0.45 }	
#  bg[ACTIVE] = { 0, 0, 0 }
#  bg[PRELIGHT] = {0.32, 0.39, 0.45 }	
}

# In this example, we inherit the attributes of the "button" style and then
# override the font and background color when prelit to create a new
# "main_button" style.

style "main_button" = "button"
{
  font = "-*-helvetica-medium-r-normal--*-100-*-*-*-*-*-*"
#  bg[PRELIGHT] = { 1.0, 0, 0 } 	# red
#  bg[NORMAL] = { 1.0, 0, 0 }
#  bg[ACTIVE] = { 1.0, 0, 0 }
  fg[NORMAL] = { 1.0, 0, 0 }
  fg[ACTIVE] = { 1.0, 0, 0 }
}

style "toggle_button" = "button"
{
  fg[ACTIVE] = { 1.0, 0, 0 }
  fg[PRELIGHT] = { 1.0, 0, 0 }
#  bg[ACTIVE] = {0.32, 0.39, 0.45 }
  # This sets the background pixmap of the toggle_button to that of its
  # parent widget (as defined in the application).
  # bg_pixmap[NORMAL] = "<parent>"
}

style "radio_button" = "marble"
{
  fg[NORMAL] = { 0, 0, 0 }
  fg[ACTIVE] = { 0, 0, 0 }
  fg[PRELIGHT] = { 1.0, 0, 0 }
  fg[SELECTED] = { 0, 0, 0 }
  fg[INSENSITIVE] = { 0, 0, 0 }  
  
}

# This sets the text for everything.

style "text"
{
  fg[NORMAL] = { 0, 0, 0 }	
  fg[ACTIVE] = { 0, 0, 0 }
  fg[PRELIGHT] = { 0, 0, 0 }
  fg[INSENSITIVE] = { 0, 0, 0 }
  fg[SELECTED] = { 0, 0, 0 }
}

style "menu_text" = "radio_button"

{
	fg[PRELIGHT] = {0.32, 0.39, 0.45 }
	fg[INSENSITIVE] = { 0.5, 0.5, 0.5 }	# grey
	bg[PRELIGHT] = {0.32, 0.39, 0.45 }
	

}

style "sys_label" = "radio_button"

{
	fg[PRELIGHT] = {0.32, 0.39, 0.45 }
	fg[NORMAL] = { 1.0, 1.0, 1.0 }	
	fg[INSENSITIVE] = { 0.5, 0.5, 0.5 }	# grey
	bg[PRELIGHT] = {0.32, 0.39, 0.45 }
	bg[NORMAL] = { 1.0, 1.0, 1.0 }	
}


style "ruler"
{
  font = "-*-helvetica-medium-r-normal--*-80-*-*-*-*-*-*"
}

# These set the widget types to use the styles defined above.
# The widget types are listed in the class hierarchy, but could probably be
# just listed in this document for the users reference.

# Only need to change these next two to get a different bg color

# main window colors
widget_class "GtkWindow" style "marble"

# comps and limiter colors
widget_class "*Gtk*Box" style "marble"

widget_class "*Gtk*Dialog" style "marble"
widget_class "GtkFileSelection" style "marble"

# fader colors
widget_class "*Gtk*Scale" style "thai-gold"


widget_class "*GtkButton*" style "button"
widget_class "*GtkCheckButton*" style "toggle_button"
widget_class "*GtkToggleButton*" style "toggle_button"
widget_class "*GtkCheckMenu*" style "radio_button"
widget_class "*GtkRadioMenu*" style "radio_button"
widget_class "*Ruler" style "ruler"
widget_class "*GtkText" style "text"
widget_class "*Gtk*Label" style "text"
widget_class "*GtkMenuBar*" style "text"
widget_class "*Gtk*Menu" style "text"
widget_class "*GtkOptionMenu*" style "text"

# notebook  color
widget_class "*GtkNotebook" style "marble"

# This sets all the buttons that are children of "window1" to
# the main_button style.  These must be documented to be taken advantage of.
widget "window1.*GtkButton*" style "main_button"

